#define BLYNK_PRINT Serial

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <HX711.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <MPU6050.h>  // MPU6050 Library

// ------------ WiFi, Blynk, Telegram ----------------
char auth[] = "ZDFUm9jgtBEkglTH9SiC2Nv3reNfJEOy";
char ssid[] = "Siddu";
char pass[] = "12341234";
#define BOT_TOKEN "7857852778:AAGjCFkG94JDkE-bd30bebyF7ELLY7-Thak"
#define CHAT_ID "1155340293"

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);
BlynkTimer timer;
bool wifiConnected = false;

// ------------ Load Cell ----------------
HX711 scale;
#define HX711_DT D5
#define HX711_SCK D6
float calibration_factor = 257435.0;
float lastAlert = 100;

// ------------ LCD ----------------
LiquidCrystal_I2C lcd(0x27, 16, 2);

// ------------ Buzzer ----------------
#define BUZZER_PIN D7

// ------------ DS18B20 Temperature Sensor ----------------
#define ONE_WIRE_BUS D4
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
float bodyTemp = 0;

// ------------ MPU6050 ----------------
MPU6050 mpu;
bool vibrationAlertSent = false;

// ------------ Setup ----------------
void setup() {
  Serial.begin(115200);

  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("   ICU Patient   ");
  lcd.setCursor(0, 1);
  lcd.print("   Monitoring    ");
  scale.begin(HX711_DT, HX711_SCK);
  scale.set_scale(calibration_factor);
  scale.tare();

  sensors.begin();  // Temp sensor

  Wire.begin();
  mpu.initialize();
  if (mpu.testConnection()) {
    Serial.println("‚úÖ MPU6050 Connected");
  } else {
    Serial.println("‚ùå MPU6050 Not Found!");
  }

  WiFi.begin(ssid, pass);
  client.setInsecure();

  for (int i = 0; i < 10; i++) {
    if (WiFi.status() == WL_CONNECTED) {
      wifiConnected = true;
      break;
    }
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  if (wifiConnected) {
    Serial.println("‚úÖ Connected to WiFi");
    Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
  } else {
    Serial.println("‚ö† No WiFi - Running offline");
  }

  Blynk.syncVirtual(V3);  // To sync BPM from ESP 1


  timer.setInterval(2000L, readLoadCell);
  timer.setInterval(3000L, updateLCD);
  timer.setInterval(4000L, readTemp);
  timer.setInterval(1000L, checkVibration);  // Check for vibration
  timer.setInterval(2000L, UpdateBPM);
}

// ------------ Loop ----------------
void loop() {
  if (wifiConnected) Blynk.run();
  timer.run();
  
}



void UpdateBPM()
{
  Blynk.syncVirtual(V3);  // To sync BPM from ESP 1
}



  int bpmFromBlynk = 0;

BLYNK_WRITE(V3) {
  bpmFromBlynk = param.asInt();  // Receive BPM
  Serial.print("Received BPM: ");
  Serial.println(bpmFromBlynk);
}

// ------------ Read Load Cell ----------------
void readLoadCell() {
  scale.set_scale(calibration_factor);

  float sum = 0;
  int numReadings = 5;

  for (int i = 0; i < numReadings; i++) {
    sum += scale.get_units() * 1000;
    delay(10);
  }

  float rawWeight = sum / numReadings;
  float weight = map(rawWeight, 40, 580, 0, 100);
  weight = constrain(weight, 0, 100);

  Serial.print("IV Bag Weight: ");
  Serial.print(weight, 2);
  Serial.println(" %");

  if (wifiConnected) {
    Blynk.virtualWrite(V2, weight);
  }

  if (lastAlert > 30 && weight <= 30) {
    Serial.println("‚ö†Ô∏è IV Bag is at 30%.");
    buzz(200);
    if (wifiConnected) sendAlert("‚ö†Ô∏è IV Bag is at 30%.");
    lastAlert = 30;
  } else if (lastAlert > 7 && weight <= 7) {
    Serial.println("üö® IV Bag is at 7% - Critical Level!");
    buzz(1000);
    if (wifiConnected) sendAlert("üö® IV Bag is at 7% - Critical Level!");
    lastAlert = 7;
  } else if (weight > 30) {
    lastAlert = weight;
  }
}

// ------------ Read Temperature ----------------
void readTemp() {
  sensors.requestTemperatures();
  bodyTemp = sensors.getTempCByIndex(0);
  Serial.print("Temp: ");
  Serial.println(bodyTemp);

  if (wifiConnected) {
    Blynk.virtualWrite(V4, bodyTemp);
  }
}

// ------------ Update LCD ----------------
void updateLCD() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IV:");
  float weight = scale.get_units() * 1000;
  float percent = map(weight, 40, 580, 0, 100);
  percent = constrain(percent, 0, 100);
  lcd.print((int)percent);
  lcd.print("%");

  lcd.setCursor(9, 0);
  lcd.print("BPM:");
  lcd.print(bpmFromBlynk);  // Now uses global value

  lcd.setCursor(0, 1);
  lcd.print("Temp:");
  lcd.print(bodyTemp, 1);
  lcd.print((char)223);  // Degree symbol
  lcd.print("C");
}


// ------------ Vibration Detection ----------------
void checkVibration() {
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  float acceleration = sqrt(ax * ax + ay * ay + az * az) / 16384.0;  // in g

  Serial.print("Accel: ");
  Serial.println(acceleration, 2);

  if (acceleration > 1.8) { // small vibration threshold
    if (!vibrationAlertSent) {
      Serial.println("üö® Vibration Detected!");
      lcd.clear();
      lcd.print("    Vibration");
      lcd.setCursor(0, 1);
      lcd.print("     Detected");
      buzz(300);
      delay(1500);
      lcd.clear();
      if (wifiConnected) sendAlert("üö® Vibration Detected on IV Stand!");
      vibrationAlertSent = true;
    }
  } else {
    vibrationAlertSent = false;  // Reset for next detection
  }
}

// ------------ Telegram Alert ----------------
void sendAlert(String message) {
  bot.sendMessage(CHAT_ID, message, "Markdown");
}

// ------------ Buzzer ----------------
void buzz(int duration) {
  for (int i = 0; i < 2; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(duration);
    digitalWrite(BUZZER_PIN, LOW);
    delay(200);
  }
}
